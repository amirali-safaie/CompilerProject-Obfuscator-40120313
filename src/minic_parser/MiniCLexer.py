# Generated from grammar/MiniC.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,37,236,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,1,0,1,0,1,0,1,1,1,1,1,
        1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,
        4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,
        7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,124,8,8,1,9,1,9,5,
        9,128,8,9,10,9,12,9,131,9,9,1,10,4,10,134,8,10,11,10,12,10,135,1,
        11,1,11,1,11,1,11,3,11,142,8,11,1,11,1,11,1,12,1,12,1,12,1,12,5,
        12,150,8,12,10,12,12,12,153,9,12,1,12,1,12,1,13,1,13,1,14,1,14,1,
        15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,
        21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,
        26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,
        31,1,32,1,32,1,33,1,33,1,34,4,34,206,8,34,11,34,12,34,207,1,34,1,
        34,1,35,1,35,1,35,1,35,5,35,216,8,35,10,35,12,35,219,9,35,1,35,1,
        35,1,36,1,36,1,36,1,36,5,36,227,8,36,10,36,12,36,230,9,36,1,36,1,
        36,1,36,1,36,1,36,2,151,228,0,37,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
        8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,
        19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,
        30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,1,0,7,3,0,65,90,95,
        95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,4,0,9,10,12,13,
        39,39,92,92,4,0,9,10,12,13,34,34,92,92,3,0,9,10,13,13,32,32,2,0,
        10,10,13,13,244,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,
        0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,
        0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,
        0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,
        0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,
        0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,
        0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,
        0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,1,75,1,0,0,0,3,78,1,0,0,0,
        5,83,1,0,0,0,7,89,1,0,0,0,9,93,1,0,0,0,11,100,1,0,0,0,13,104,1,0,
        0,0,15,109,1,0,0,0,17,123,1,0,0,0,19,125,1,0,0,0,21,133,1,0,0,0,
        23,137,1,0,0,0,25,145,1,0,0,0,27,156,1,0,0,0,29,158,1,0,0,0,31,160,
        1,0,0,0,33,162,1,0,0,0,35,164,1,0,0,0,37,166,1,0,0,0,39,168,1,0,
        0,0,41,170,1,0,0,0,43,172,1,0,0,0,45,174,1,0,0,0,47,177,1,0,0,0,
        49,180,1,0,0,0,51,183,1,0,0,0,53,186,1,0,0,0,55,189,1,0,0,0,57,192,
        1,0,0,0,59,194,1,0,0,0,61,196,1,0,0,0,63,198,1,0,0,0,65,200,1,0,
        0,0,67,202,1,0,0,0,69,205,1,0,0,0,71,211,1,0,0,0,73,222,1,0,0,0,
        75,76,5,105,0,0,76,77,5,102,0,0,77,2,1,0,0,0,78,79,5,101,0,0,79,
        80,5,108,0,0,80,81,5,115,0,0,81,82,5,101,0,0,82,4,1,0,0,0,83,84,
        5,119,0,0,84,85,5,104,0,0,85,86,5,105,0,0,86,87,5,108,0,0,87,88,
        5,101,0,0,88,6,1,0,0,0,89,90,5,102,0,0,90,91,5,111,0,0,91,92,5,114,
        0,0,92,8,1,0,0,0,93,94,5,114,0,0,94,95,5,101,0,0,95,96,5,116,0,0,
        96,97,5,117,0,0,97,98,5,114,0,0,98,99,5,110,0,0,99,10,1,0,0,0,100,
        101,5,105,0,0,101,102,5,110,0,0,102,103,5,116,0,0,103,12,1,0,0,0,
        104,105,5,99,0,0,105,106,5,104,0,0,106,107,5,97,0,0,107,108,5,114,
        0,0,108,14,1,0,0,0,109,110,5,98,0,0,110,111,5,111,0,0,111,112,5,
        111,0,0,112,113,5,108,0,0,113,16,1,0,0,0,114,115,5,116,0,0,115,116,
        5,114,0,0,116,117,5,117,0,0,117,124,5,101,0,0,118,119,5,102,0,0,
        119,120,5,97,0,0,120,121,5,108,0,0,121,122,5,115,0,0,122,124,5,101,
        0,0,123,114,1,0,0,0,123,118,1,0,0,0,124,18,1,0,0,0,125,129,7,0,0,
        0,126,128,7,1,0,0,127,126,1,0,0,0,128,131,1,0,0,0,129,127,1,0,0,
        0,129,130,1,0,0,0,130,20,1,0,0,0,131,129,1,0,0,0,132,134,7,2,0,0,
        133,132,1,0,0,0,134,135,1,0,0,0,135,133,1,0,0,0,135,136,1,0,0,0,
        136,22,1,0,0,0,137,141,5,39,0,0,138,142,8,3,0,0,139,140,5,92,0,0,
        140,142,9,0,0,0,141,138,1,0,0,0,141,139,1,0,0,0,142,143,1,0,0,0,
        143,144,5,39,0,0,144,24,1,0,0,0,145,151,5,34,0,0,146,150,8,4,0,0,
        147,148,5,92,0,0,148,150,9,0,0,0,149,146,1,0,0,0,149,147,1,0,0,0,
        150,153,1,0,0,0,151,152,1,0,0,0,151,149,1,0,0,0,152,154,1,0,0,0,
        153,151,1,0,0,0,154,155,5,34,0,0,155,26,1,0,0,0,156,157,5,40,0,0,
        157,28,1,0,0,0,158,159,5,41,0,0,159,30,1,0,0,0,160,161,5,123,0,0,
        161,32,1,0,0,0,162,163,5,125,0,0,163,34,1,0,0,0,164,165,5,59,0,0,
        165,36,1,0,0,0,166,167,5,44,0,0,167,38,1,0,0,0,168,169,5,61,0,0,
        169,40,1,0,0,0,170,171,5,62,0,0,171,42,1,0,0,0,172,173,5,60,0,0,
        173,44,1,0,0,0,174,175,5,61,0,0,175,176,5,61,0,0,176,46,1,0,0,0,
        177,178,5,60,0,0,178,179,5,61,0,0,179,48,1,0,0,0,180,181,5,62,0,
        0,181,182,5,61,0,0,182,50,1,0,0,0,183,184,5,33,0,0,184,185,5,61,
        0,0,185,52,1,0,0,0,186,187,5,38,0,0,187,188,5,38,0,0,188,54,1,0,
        0,0,189,190,5,124,0,0,190,191,5,124,0,0,191,56,1,0,0,0,192,193,5,
        33,0,0,193,58,1,0,0,0,194,195,5,43,0,0,195,60,1,0,0,0,196,197,5,
        45,0,0,197,62,1,0,0,0,198,199,5,42,0,0,199,64,1,0,0,0,200,201,5,
        47,0,0,201,66,1,0,0,0,202,203,5,37,0,0,203,68,1,0,0,0,204,206,7,
        5,0,0,205,204,1,0,0,0,206,207,1,0,0,0,207,205,1,0,0,0,207,208,1,
        0,0,0,208,209,1,0,0,0,209,210,6,34,0,0,210,70,1,0,0,0,211,212,5,
        47,0,0,212,213,5,47,0,0,213,217,1,0,0,0,214,216,8,6,0,0,215,214,
        1,0,0,0,216,219,1,0,0,0,217,215,1,0,0,0,217,218,1,0,0,0,218,220,
        1,0,0,0,219,217,1,0,0,0,220,221,6,35,0,0,221,72,1,0,0,0,222,223,
        5,47,0,0,223,224,5,42,0,0,224,228,1,0,0,0,225,227,9,0,0,0,226,225,
        1,0,0,0,227,230,1,0,0,0,228,229,1,0,0,0,228,226,1,0,0,0,229,231,
        1,0,0,0,230,228,1,0,0,0,231,232,5,42,0,0,232,233,5,47,0,0,233,234,
        1,0,0,0,234,235,6,36,0,0,235,74,1,0,0,0,10,0,123,129,135,141,149,
        151,207,217,228,1,6,0,0
    ]

class MiniCLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    IF = 1
    ELSE = 2
    WHILE = 3
    FOR = 4
    RETURN = 5
    INT = 6
    CHAR = 7
    BOOL = 8
    BOOL_LITERAL = 9
    IDENTIFIER = 10
    INT_LITERAL = 11
    CHAR_LITERAL = 12
    STRING_LITERAL = 13
    LPAREN = 14
    RPAREN = 15
    LBRACE = 16
    RBRACE = 17
    SEMI = 18
    COMMA = 19
    ASSIGN = 20
    GT = 21
    LT = 22
    EQ = 23
    LTE = 24
    GTE = 25
    NEQ = 26
    AND = 27
    OR = 28
    NOT = 29
    PLUS = 30
    MINUS = 31
    MUL = 32
    DIV = 33
    MOD = 34
    WS = 35
    COMMENT = 36
    BLOCK_COMMENT = 37

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'if'", "'else'", "'while'", "'for'", "'return'", "'int'", "'char'", 
            "'bool'", "'('", "')'", "'{'", "'}'", "';'", "','", "'='", "'>'", 
            "'<'", "'=='", "'<='", "'>='", "'!='", "'&&'", "'||'", "'!'", 
            "'+'", "'-'", "'*'", "'/'", "'%'" ]

    symbolicNames = [ "<INVALID>",
            "IF", "ELSE", "WHILE", "FOR", "RETURN", "INT", "CHAR", "BOOL", 
            "BOOL_LITERAL", "IDENTIFIER", "INT_LITERAL", "CHAR_LITERAL", 
            "STRING_LITERAL", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "SEMI", 
            "COMMA", "ASSIGN", "GT", "LT", "EQ", "LTE", "GTE", "NEQ", "AND", 
            "OR", "NOT", "PLUS", "MINUS", "MUL", "DIV", "MOD", "WS", "COMMENT", 
            "BLOCK_COMMENT" ]

    ruleNames = [ "IF", "ELSE", "WHILE", "FOR", "RETURN", "INT", "CHAR", 
                  "BOOL", "BOOL_LITERAL", "IDENTIFIER", "INT_LITERAL", "CHAR_LITERAL", 
                  "STRING_LITERAL", "LPAREN", "RPAREN", "LBRACE", "RBRACE", 
                  "SEMI", "COMMA", "ASSIGN", "GT", "LT", "EQ", "LTE", "GTE", 
                  "NEQ", "AND", "OR", "NOT", "PLUS", "MINUS", "MUL", "DIV", 
                  "MOD", "WS", "COMMENT", "BLOCK_COMMENT" ]

    grammarFileName = "MiniC.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


